# Turtil Backend Environment Configuration Example
# Copy this file to .env and update with your actual values
# 
# ðŸš€ SMART ENVIRONMENT DETECTION:
# - No .env file = Local development mode (uses mocks automatically)
# - .env file present = Uses real services based on ENVIRONMENT setting
# - TESTING=true = Testing mode (in-memory database + mocks)

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
PROJECT_NAME=turtil-backend
VERSION=1.0.0
ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

# =============================================================================
# DATABASE CONFIGURATION (SENSITIVE - Use GitHub Secrets in Production)
# =============================================================================
# PostgreSQL URL for development/staging/production
# Format: postgresql+asyncpg://username:password@host:port/database
DATABASE_URL=postgresql+asyncpg://turtil_user:your_password@localhost:5432/turtil_dev

# Alternative local PostgreSQL setup:
# DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/turtil

# Note: Without .env file, app uses SQLite: ./local_dev.db

# =============================================================================
# SECURITY SETTINGS (SENSITIVE - Use GitHub Secrets in Production)
# =============================================================================
# Generate a secure secret key (use: openssl rand -hex 32)
SECRET_KEY=your-super-secret-jwt-key-here-change-in-production
ALGORITHM=HS256

# Token expiration times
CMS_ACCESS_TOKEN_EXPIRE_MINUTES=15
CMS_REFRESH_TOKEN_EXPIRE_DAYS=30
STUDENT_ACCESS_TOKEN_EXPIRE_MINUTES=15
STUDENT_REFRESH_TOKEN_EXPIRE_DAYS=30

# =============================================================================
# REDIS CONFIGURATION (SENSITIVE - Use GitHub Secrets in Production)  
# =============================================================================
# Get from Upstash Redis Console: https://console.upstash.com/redis
UPSTASH_REDIS_URL=your-upstash-redis-url
UPSTASH_REDIS_TOKEN=your-upstash-redis-token

# Session and cache settings
REDIS_BLACKLIST_TTL=86400
REDIS_SESSION_TTL=2592000

# Note: Without .env file, app uses FakeRedis (in-memory)

# =============================================================================
# AWS CONFIGURATION (SENSITIVE - Use GitHub Secrets in Production)
# =============================================================================
# AWS IAM credentials (create dedicated user for this app)
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_REGION=ap-south-1

# SES Email configuration
AWS_SES_FROM_EMAIL=support@turtil.co
AWS_SES_REGION=ap-south-1

# S3 Storage configuration
S3_BUCKET_NAME=turtil-backend-dev
S3_REGION=ap-south-1

# Note: Without .env file, app uses mock services (emails logged to console)

# =============================================================================
# CORS AND SECURITY
# =============================================================================
# Frontend URLs (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000,https://yourdomain.com

# Allowed hosts (comma-separated)  
ALLOWED_HOSTS=*,localhost,127.0.0.1,0.0.0.0

# =============================================================================
# DEVELOPMENT FEATURES
# =============================================================================
# Development OTP (for easy testing)
DEV_OTP=123456

# Rate limiting
RATE_LIMIT_CALLS=100
RATE_LIMIT_PERIOD=60

# =============================================================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# =============================================================================

# LOCAL DEVELOPMENT (.env) - Uses real services
# ENVIRONMENT=development
# DATABASE_URL=postgresql+asyncpg://user:pass@localhost:5432/turtil_dev
# DEBUG=true
# (All AWS, Redis services as configured above)

# STAGING ENVIRONMENT (.env)
# ENVIRONMENT=staging  
# DATABASE_URL=postgresql+asyncpg://user:pass@staging-db:5432/turtil_staging
# DEBUG=false
# S3_BUCKET_NAME=turtil-backend-staging

# PRODUCTION ENVIRONMENT (.env)
# ENVIRONMENT=production
# DATABASE_URL=postgresql+asyncpg://user:pass@prod-db:5432/turtil_prod
# DEBUG=false
# S3_BUCKET_NAME=turtil-backend-prod

# TESTING ENVIRONMENT (auto-set by pytest)
# TESTING=true (automatically uses in-memory SQLite + all mocks)

# =============================================================================
# QUICK START GUIDE
# =============================================================================
# 
# ðŸš€ OPTION 1: Local Development with Mock Services (Recommended for quick start)
# 1. Ensure NO .env file exists: rm .env (if it exists)
# 2. Run: python run.py
# 3. App automatically uses:
#    - SQLite database (persistent): ./local_dev.db
#    - Mock email service (logged to console)
#    - Mock S3 service (files saved to ./mock_storage/)
#    - FakeRedis (in-memory)
#    - All endpoints work without external dependencies!
# 
# ðŸ”§ OPTION 2: Local Development with Real Services
# 1. Copy this file: cp .env.example .env
# 2. Update DATABASE_URL with your PostgreSQL connection
# 3. Set a secure SECRET_KEY (generate with: openssl rand -hex 32)
# 4. Configure Upstash Redis URL and token
# 5. Set up AWS credentials and SES email
# 6. Run: python run.py
# 
# ðŸ§ª OPTION 3: Run Tests
# 1. Ensure pytest is installed: pip install pytest pytest-asyncio
# 2. Run comprehensive tests: python test.py
# 3. Tests automatically use in-memory database + all mocks
# 4. Report opens in browser (local) or uploads to S3 (CI)

# =============================================================================
# SMART ENVIRONMENT BEHAVIOR SUMMARY
# =============================================================================
# 
# No .env file:
# âœ… Uses SQLite (./local_dev.db) - persistent across restarts
# âœ… Mock AWS SES - emails logged to console and logs/mock_emails.log
# âœ… Mock S3 - files saved to ./mock_storage/
# âœ… FakeRedis - in-memory, lost on restart
# âœ… Mock push notifications - logged to console
# âœ… Perfect for quick development without setup
# 
# With .env file:
# âœ… Uses PostgreSQL from DATABASE_URL
# âœ… Real AWS SES for email sending
# âœ… Real S3 for file storage
# âœ… Real Upstash Redis for sessions
# âœ… Real Expo push notifications
# âœ… Production-ready configuration
# 
# TESTING=true (pytest):
# âœ… Uses in-memory SQLite - fresh for each test
# âœ… All mock services enabled
# âœ… Isolated test environment