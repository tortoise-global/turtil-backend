
terraform {
  required_version = ">= 1.5.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.53.0"
    }
  }

  backend "s3" {
    bucket = "turtil-backend-terraform"
    key    = "tf-infra/terraform.tfstate"
    region = "ap-south-1"
  }
}

provider "aws" {
  region = var.aws_region
}

# S3 Buckets Module
module "s3_buckets" {
  source = "./modules/buckets"
  
  bucket_name = "${var.s3_bucket_prefix}-${var.environment}-storage"
  environment = var.environment
  bucket_purpose = "app-storage"
  enable_versioning = var.enable_s3_versioning
  enable_lifecycle = var.s3_lifecycle_enabled
  tags = var.tags
}

# ECR Repository Module
module "ecr_repo" {
  source = "./modules/ecr"
  
  repository_name = "${var.ecr_repository_name}-${var.environment}"
  image_tag_mutability = var.ecr_image_tag_mutability
  max_image_count = var.ecr_max_image_count
  tags = var.tags
}

# EC2 and Auto Scaling Module (must come first for networking outputs)
module "ec2" {
  source = "./modules/ec2"
  
  project_name                    = var.project_name
  environment                     = var.environment
  aws_region                      = var.aws_region
  
  # Instance Configuration
  instance_type                   = var.instance_type
  enable_single_instance          = var.enable_single_instance
  enable_spot_instances           = var.enable_spot_instances
  
  # Auto Scaling Configuration (for test/prod)
  min_size                        = var.min_size
  max_size                        = var.max_size
  desired_capacity                = var.desired_capacity
  
  # Application Variables
  ecr_account_id                  = var.ecr_account_id
  app_database_url               = var.app_database_url
  app_secret_key                 = var.app_secret_key
  app_algorithm                  = var.app_algorithm
  app_access_token_expire_minutes = var.app_access_token_expire_minutes
  app_version                    = var.app_version
  app_debug                      = var.app_debug
  app_log_level                  = var.app_log_level
  app_rate_limit_calls           = var.app_rate_limit_calls
  app_rate_limit_period          = var.app_rate_limit_period
  app_otp_expiry_minutes         = var.app_otp_expiry_minutes
  app_aws_access_key_id          = var.app_aws_access_key_id
  app_aws_secret_access_key      = var.app_aws_secret_access_key
  app_upstash_redis_url          = var.app_upstash_redis_url
  app_upstash_redis_token        = var.app_upstash_redis_token
  app_redis_user_cache_ttl       = var.app_redis_user_cache_ttl
  app_redis_blacklist_ttl        = var.app_redis_blacklist_ttl
  app_aws_ses_from_email         = var.app_aws_ses_from_email
  app_aws_ses_region             = var.app_aws_ses_region
  
  # Network Configuration
  vpc_cidr                        = var.vpc_cidr
  availability_zones              = var.availability_zones
  
  # Tags
  tags                           = var.tags
  
  depends_on = [module.ecr_repo]
}

# Database Module (depends on EC2 for networking)
module "database" {
  source = "./modules/database"
  
  project_name           = var.project_name
  environment            = var.environment
  database_name          = var.database_name
  database_type          = var.database_type
  database_instance_class = var.database_instance_class
  database_allocated_storage = var.database_allocated_storage
  database_multi_az      = var.database_multi_az
  database_backup_retention = var.database_backup_retention
  enable_deletion_protection = var.enable_deletion_protection
  
  # Network dependencies from EC2 module
  vpc_id                 = module.ec2.vpc_id
  private_subnet_ids     = module.ec2.subnet_ids
  app_security_group_id  = module.ec2.security_group_id
  
  tags = var.tags
  
  depends_on = [module.ec2]
}

# Application Load Balancer Module (Exclude for development - temporarily disabled for initial deployment)
# module "example_alb" {
#   count  = var.environment != "dev" ? 1 : 0
#   source = "./modules/load_balancers"
#   
#   project_name = var.project_name
#   environment  = var.environment
#   aws_region   = var.aws_region
#   
#   depends_on = [module.ec2]
# }

# CloudFront Module (Production only - temporarily disabled for initial deployment)
# module "cloudfront_with_alb" {
#   count  = var.environment == "prod" ? 1 : 0
#   source = "./modules/cloudfront"
#   
#   project_name = var.project_name
#   environment  = var.environment
#   aws_region   = var.aws_region
#   alb_dns_name = length(module.example_alb) > 0 ? module.example_alb[0].alb_dns_name : ""
#   
#   depends_on = [module.example_alb]
# }

# Lambda Functions Module (temporarily disabled for initial deployment)
# module "lambda_functions" {
#   source = "./modules/lambda"
#   
#   project_name = var.project_name
#   environment  = var.environment
#   aws_region   = var.aws_region
#   
#   depends_on = [module.s3_buckets]
# }

# EventBridge Module (temporarily disabled for initial deployment)
# module "eventbridge" {
#   source = "./modules/eventbridge"
#   
#   project_name = var.project_name
#   environment  = var.environment
#   aws_region   = var.aws_region
#   
#   depends_on = [module.lambda_functions]
# }