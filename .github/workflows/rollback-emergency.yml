name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      target_commit:
        description: 'Commit SHA to rollback to (leave empty to rollback to previous deployment)'
        required: false
        type: string
      confirm_rollback:
        description: 'Type CONFIRM to proceed with rollback'
        required: true
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  AWS_REGION: ap-south-1

jobs:
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      target_sha: ${{ steps.determine-target.outputs.target_sha }}
      proceed: ${{ steps.validate.outputs.proceed }}
    
    steps:
      - name: üîç Validate Rollback Confirmation
        id: validate
        run: |
          if [ "${{ github.event.inputs.confirm_rollback }}" != "CONFIRM" ]; then
            echo "‚ùå Rollback not confirmed. Must type CONFIRM exactly."
            exit 1
          fi
          echo "‚úÖ Rollback confirmed"
          echo "proceed=true" >> $GITHUB_OUTPUT

      - name: üì¶ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - name: üéØ Determine Target Commit
        id: determine-target
        run: |
          if [ -n "${{ github.event.inputs.target_commit }}" ]; then
            TARGET_SHA="${{ github.event.inputs.target_commit }}"
            echo "üéØ Using specified commit: $TARGET_SHA"
          else
            # Get the commit before the current HEAD
            TARGET_SHA=$(git rev-parse HEAD~1)
            echo "üéØ Using previous commit: $TARGET_SHA"
          fi
          
          # Validate commit exists
          if ! git cat-file -e "$TARGET_SHA"; then
            echo "‚ùå Commit $TARGET_SHA does not exist"
            exit 1
          fi
          
          echo "‚úÖ Target commit validated: $TARGET_SHA"
          echo "target_sha=$TARGET_SHA" >> $GITHUB_OUTPUT

  emergency-rollback:
    name: Execute Emergency Rollback
    runs-on: ubuntu-latest
    environment: dev
    needs: validate-rollback
    if: needs.validate-rollback.outputs.proceed == 'true'
    timeout-minutes: 15
    
    steps:
      - name: üì¶ Checkout Target Commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target_sha }}

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üö® Rollback Notification
        run: |
          echo "========================================"
          echo "üö® EMERGENCY ROLLBACK IN PROGRESS"
          echo "========================================"
          echo "Target Commit: ${{ needs.validate-rollback.outputs.target_sha }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Initiated by: ${{ github.actor }}"
          echo "Timestamp: $(date -u)"
          echo "========================================"

      - name: üõë Stop Current Application
        run: |
          echo "üõë Stopping current application..."
          
          # Get current instance ID
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ secrets.PROJECT_NAME }}-dev" \
                     "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text --region ${{ env.AWS_REGION }})
          
          if [ "$INSTANCE_ID" != "None" ] && [ "$INSTANCE_ID" != "null" ]; then
            echo "üìç Found instance: $INSTANCE_ID"
            
            # Stop application service
            aws ssm send-command \
              --instance-ids $INSTANCE_ID \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["sudo systemctl stop turtil-backend"]' \
              --region ${{ env.AWS_REGION }} || echo "‚ö†Ô∏è Failed to stop service"
            
            echo "‚úÖ Application stopped"
          else
            echo "‚ö†Ô∏è No running instance found"
          fi

      - name: üê≥ Build and Deploy Rollback Image
        run: |
          echo "üèóÔ∏è Building rollback Docker image..."
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          ECR_REGISTRY="${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          ROLLBACK_TAG="rollback-$(date +%Y%m%d-%H%M%S)"
          
          # Build and push rollback image using buildx
          echo "üèóÔ∏è Building rollback image for ARM64 using buildx..."
          docker buildx build \
            --platform linux/arm64 \
            --tag $ECR_REGISTRY/$ECR_REPO_NAME:$ROLLBACK_TAG \
            --tag $ECR_REGISTRY/$ECR_REPO_NAME:latest \
            --push \
            .
          
          echo "‚úÖ Rollback image deployed with tag: $ROLLBACK_TAG"

      - name: üîÑ Restart Application with Rollback
        run: |
          echo "üîÑ Restarting application with rollback version..."
          
          # Get instance ID
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ secrets.PROJECT_NAME }}-dev" \
                     "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text --region ${{ env.AWS_REGION }})
          
          if [ "$INSTANCE_ID" != "None" ] && [ "$INSTANCE_ID" != "null" ]; then
            # Restart application service
            aws ssm send-command \
              --instance-ids $INSTANCE_ID \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "sudo docker pull ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ secrets.PROJECT_NAME }}-dev:latest",
                "sudo systemctl restart turtil-backend",
                "sudo systemctl status turtil-backend"
              ]' \
              --region ${{ env.AWS_REGION }} \
              --output json > /tmp/restart_command.json
            
            # Wait for restart to complete
            COMMAND_ID=$(cat /tmp/restart_command.json | jq -r '.Command.CommandId')
            aws ssm wait command-executed \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --region ${{ env.AWS_REGION }}
            
            echo "‚úÖ Application restarted with rollback version"
          else
            echo "‚ùå No instance found for restart"
            exit 1
          fi

      - name: üè• Verify Rollback Health
        timeout-minutes: 5
        run: |
          echo "üè• Verifying rollback health..."
          
          # Get instance IP
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ secrets.PROJECT_NAME }}-dev" \
                     "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text --region ${{ env.AWS_REGION }})
          
          HEALTH_URL="http://$INSTANCE_IP:8000/health"
          
          # Wait for application to start
          echo "‚è≥ Waiting for application startup (30 seconds)..."
          sleep 30
          
          # Health check with retries
          for i in {1..10}; do
            if curl -f -s --max-time 10 "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Rollback health check passed (attempt $i/10)"
              break
            else
              echo "‚è≥ Health check failed, retrying... (attempt $i/10)"
              if [ $i -eq 10 ]; then
                echo "‚ùå Rollback health check failed after 10 attempts"
                exit 1
              fi
              sleep 15
            fi
          done
          
          echo "üéâ Rollback verification completed successfully"

      - name: üìä Rollback Summary
        if: always()
        run: |
          echo "========================================"
          echo "üö® ROLLBACK SUMMARY"
          echo "========================================"
          echo "Target Commit: ${{ needs.validate-rollback.outputs.target_sha }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Initiated by: ${{ github.actor }}"
          echo "Completed at: $(date -u)"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Rollback Status: SUCCESS"
            echo ""
            echo "üåê Application URLs:"
            
            INSTANCE_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=${{ secrets.PROJECT_NAME }}-dev" \
                       "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text --region ${{ env.AWS_REGION }})
            
            echo "   Health: http://$INSTANCE_IP:8000/health"
            echo "   API: http://dev.api.turtil.co"
            echo "   Docs: http://dev.api.turtil.co/docs"
          else
            echo "‚ùå Rollback Status: FAILED"
            echo ""
            echo "üéØ Manual intervention required:"
            echo "1. Check EC2 instance logs"
            echo "2. Verify Docker container status"
            echo "3. Consider infrastructure rollback if needed"
          fi
          echo "========================================"

      - name: üö® Post-Rollback Actions
        if: success()
        run: |
          echo "üö® Post-rollback actions completed:"
          echo "1. ‚úÖ Application rolled back to commit ${{ needs.validate-rollback.outputs.target_sha }}"
          echo "2. ‚úÖ Health checks passed"
          echo "3. ‚ö†Ô∏è  Consider investigating the issue that caused the rollback"
          echo "4. ‚ö†Ô∏è  Update team about the rollback status"
          echo "5. ‚ö†Ô∏è  Plan for fixing the issue and redeploying when ready"