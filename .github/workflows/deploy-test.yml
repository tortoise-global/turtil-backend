name: Deploy to Test

on:
  push:
    branches:
      - test
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: test
  TF_WORKSPACE: test

jobs:
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    environment: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Select Terraform Workspace
        working-directory: ./terraform
        run: |
          terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var-file="environments/test.tfvars" -out=tfplan
        env:
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_app_debug: "false"

      - name: Import Existing Test Resources
        working-directory: ./terraform
        continue-on-error: true
        run: |
          echo "üîç Checking for existing test resources to import..."
          
          # Import ECR repository if it exists
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-test"
          if aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "‚úÖ ECR repository exists, importing..."
            terraform import module.ecr_repo.aws_ecr_repository.this "$ECR_REPO_NAME" || echo "‚ö†Ô∏è ECR import failed or already imported"
          fi
          
          # Import ALB if it exists
          ALB_NAME="${{ secrets.PROJECT_NAME }}-test-alb"
          ALB_ARN=$(aws elbv2 describe-load-balancers --names "$ALB_NAME" --query 'LoadBalancers[0].LoadBalancerArn' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "None")
          if [ "$ALB_ARN" != "None" ] && [ "$ALB_ARN" != "null" ]; then
            echo "‚úÖ ALB exists, importing..."
            terraform import module.example_alb[0].aws_lb.this "$ALB_ARN" || echo "‚ö†Ô∏è ALB import failed or already imported"
          fi
          
          echo "üîß Test import phase completed"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-test"
          docker build --platform linux/arm64 -t $ECR_REPO_NAME .

      - name: Tag Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-test"
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:test
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Push Docker Images to ECR
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-test"
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:test
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Test Environment Deployment
        working-directory: ./terraform
        run: |
          ASG_NAME=$(terraform output -raw asg_name)
          echo "Starting rolling deployment for test ASG: $ASG_NAME"

          # Start instance refresh for test environment
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --region ${{ env.AWS_REGION }} \
            --strategy Rolling \
            --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 120}' \
            --query 'InstanceRefreshId' \
            --output text)

          echo "Instance refresh started with ID: $REFRESH_ID"

          # Monitor the refresh progress (shorter timeout for test)
          echo "üîÑ Test deployment in progress..."
          TIMEOUT=900  # 15 minutes timeout for test
          START_TIME=$(date +%s)
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "‚ùå Test deployment timeout after 15 minutes"
              exit 1
            fi
            
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --region ${{ env.AWS_REGION }} \
              --instance-refresh-ids "$REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)

            case $REFRESH_STATUS in
              "Successful")
                echo "‚úÖ Test deployment completed successfully!"
                break
                ;;
              "Failed"|"Cancelled")
                echo "‚ùå Test deployment failed with status: $REFRESH_STATUS"
                exit 1
                ;;
              "InProgress"|"Pending")
                sleep 30
                ;;
              *)
                echo "‚ö†Ô∏è Unknown status: $REFRESH_STATUS"
                sleep 15
                ;;
            esac
          done

      - name: Verify Test Deployment
        working-directory: ./terraform
        run: |
          echo "Verifying test deployment..."
          ALB_DNS=$(terraform output -raw example_alb_dns_name)
          ALB_ENDPOINT="http://$ALB_DNS/health"
          
          echo "Testing test ALB health endpoint: $ALB_ENDPOINT"
          sleep 60  # Allow time for ALB to detect healthy targets
          
          if curl -f --max-time 30 --retry 5 --retry-delay 10 "$ALB_ENDPOINT"; then
            echo "‚úÖ Test deployment verification successful!"
            echo "üîó Test environment available at: http://$ALB_DNS"
          else
            echo "‚ùå Test deployment verification failed!"
            # Gather debugging information
            ASG_NAME=$(terraform output -raw asg_name)
            echo "üìù Gathering test debugging information..."
            
            aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$ASG_NAME" \
              --region ${{ env.AWS_REGION }} \
              --query 'AutoScalingGroups[0].{DesiredCapacity:DesiredCapacity,MinSize:MinSize,MaxSize:MaxSize,Instances:Instances[].{InstanceId:InstanceId,LifecycleState:LifecycleState,HealthStatus:HealthStatus}}' \
              --output table
            
            TARGET_GROUP_ARN=$(terraform output -raw example_alb_target_group_arn)
            aws elbv2 describe-target-health \
              --target-group-arn "$TARGET_GROUP_ARN" \
              --region ${{ env.AWS_REGION }} \
              --output table
            
            exit 1
          fi

      - name: Test Deployment Success
        if: success()
        run: |
          echo "üß™ TEST DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "Environment: test"
          echo "Branch: test"
          echo "Commit: ${{ github.sha }}"
          echo "Production-like testing environment with load balancer and minimal scaling."