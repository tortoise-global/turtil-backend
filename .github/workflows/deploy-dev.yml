name: Deploy Turtil Backend

on:
  push:
    branches:
      - dev
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  AWS_REGION: ap-south-1

jobs:
  deploy:
    name: Deploy Turtil Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Sync Terraform State
        working-directory: ./terraform
        run: |
          echo "🔄 Syncing Terraform state with remote backend..."
          source ./scripts/loadenv.sh
          terraform refresh
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          source ./scripts/loadenv.sh
          terraform plan -out=tfplan
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}

      - name: Import Existing Resources
        working-directory: ./terraform
        continue-on-error: true
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}
        run: |
          echo "🔍 Checking for existing development resources to import..."
          
          # Import ECR repository if it exists
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          if aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "✅ ECR repository exists, importing..."
            terraform import aws_ecr_repository.dev_app "$ECR_REPO_NAME" || echo "⚠️ ECR import failed or already imported"
          fi
          
          # Import DB subnet group if it exists (new VPC version)
          DB_SUBNET_GROUP_NAME="${{ secrets.PROJECT_NAME }}-dev-vpc-db-subnet-group"
          if aws rds describe-db-subnet-groups --db-subnet-group-name "$DB_SUBNET_GROUP_NAME" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "✅ DB subnet group exists, importing..."
            terraform import aws_db_subnet_group.main "$DB_SUBNET_GROUP_NAME" || echo "⚠️ DB subnet group import failed or already imported"
          fi
          
          # Import RDS database instance if it exists
          DB_INSTANCE_NAME="${{ secrets.PROJECT_NAME }}-dev"
          if aws rds describe-db-instances --db-instance-identifier "$DB_INSTANCE_NAME" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "✅ RDS database exists, importing..."
            terraform import aws_db_instance.dev_database "$DB_INSTANCE_NAME" || echo "⚠️ RDS database import failed or already imported"
          fi
          
          # Import IAM resources if they exist
          IAM_ROLE_NAME="${{ secrets.PROJECT_NAME }}-dev-ec2-role"
          if aws iam get-role --role-name "$IAM_ROLE_NAME" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "✅ IAM role exists, importing..."
            terraform import aws_iam_role.dev_ec2_role "$IAM_ROLE_NAME" || echo "⚠️ IAM role import failed or already imported"
          fi
          
          IAM_PROFILE_NAME="${{ secrets.PROJECT_NAME }}-dev-ec2-profile"
          if aws iam get-instance-profile --instance-profile-name "$IAM_PROFILE_NAME" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "✅ IAM instance profile exists, importing..."
            terraform import aws_iam_instance_profile.dev_ec2_profile "$IAM_PROFILE_NAME" || echo "⚠️ IAM instance profile import failed or already imported"
          fi
          
          # Skip ALB import for development environment (no ALB in dev)
          echo "⚠️ Skipping ALB import for development environment (no load balancer)"
          
          echo "🔧 Development import phase completed"

      - name: Regenerate Terraform Plan After Imports
        working-directory: ./terraform
        run: |
          source ./scripts/loadenv.sh
          terraform plan -out=tfplan
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          docker build --platform linux/arm64 -t $ECR_REPO_NAME .

      - name: Tag Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:dev
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Push Docker Images to ECR
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:dev
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Verify Deployment
        working-directory: ./terraform
        run: |
          echo "Verifying deployment..."
          API_URL=$(terraform output -raw dev_api_url)
          HEALTH_ENDPOINT="${API_URL}/health"
          
          echo "Testing API health endpoint: $HEALTH_ENDPOINT"
          sleep 180  # Allow more time for nginx + FastAPI startup
          
          if curl -f --max-time 30 --retry 15 --retry-delay 20 "$HEALTH_ENDPOINT"; then
            echo "✅ Deployment verification successful!"
            echo "🔗 API URL: $API_URL"
            echo "📚 API Docs: ${API_URL}/docs"
            echo "💚 Health Check: $HEALTH_ENDPOINT"
          else
            echo "❌ Deployment verification failed!"
            echo "Attempting fallback to direct IP..."
            INSTANCE_IP=$(terraform output -raw ec2_public_ip)
            FALLBACK_URL="http://$INSTANCE_IP:8000/health"
            echo "Trying direct access: $FALLBACK_URL"
            if curl -f --max-time 30 --retry 5 --retry-delay 10 "$FALLBACK_URL"; then
              echo "⚠️ Direct IP access works, but domain routing failed"
              echo "Check Route 53 DNS propagation for dev.api.turtil.co"
            fi
            exit 1
          fi

      - name: Deployment Success
        if: success()
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Single EC2 instance deployment"