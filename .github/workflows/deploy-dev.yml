name: Deploy Turtil Backend

on:
  push:
    branches:
      - dev
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  AWS_REGION: ap-south-1

jobs:
  deploy:
    name: Deploy Turtil Backend
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Backup Terraform State
        working-directory: ./terraform
        continue-on-error: true
        run: |
          echo "💾 Creating backup of current Terraform state..."
          
          # Backup current state for safety
          aws s3 cp s3://turtil-backend-terraform/modular-dev/terraform.tfstate s3://turtil-backend-terraform/modular-dev/terraform.tfstate.backup.$(date +%Y%m%d_%H%M%S) || echo "No existing state to backup"
          
          echo "✅ State backup completed"

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          echo "🔧 Initializing Terraform..."
          
          # Initialize Terraform with backend
          terraform init -upgrade
          
          echo "✅ Terraform initialization completed"

      - name: Sync Terraform State
        working-directory: ./terraform
        run: |
          echo "🔄 TF_VAR variables already loaded from GitHub secrets..."
          echo "✅ State sync completed"
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}

      - name: Import Existing AWS Resources
        working-directory: ./terraform
        continue-on-error: true
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}
        run: |
          echo "📥 Importing existing AWS resources to avoid conflicts..."
          
          PROJECT_NAME="${{ secrets.PROJECT_NAME }}"
          AWS_REGION="${{ env.AWS_REGION }}"
          
          # Function to safely import resources
          safe_import() {
            local resource_name="$1"
            local resource_id="$2"
            echo "Importing $resource_name..."
            terraform import "$resource_name" "$resource_id" 2>/dev/null || echo "⚠️ $resource_name not found or already imported"
          }
          
          # 1. Import VPC and networking resources
          echo "🌐 Importing VPC and networking..."
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${PROJECT_NAME}-vpc" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "null")
          if [ "$VPC_ID" != "null" ] && [ "$VPC_ID" != "None" ]; then
            safe_import "module.vpc.aws_vpc.main" "$VPC_ID"
            
            # Import Internet Gateway
            IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[0].InternetGatewayId' --output text 2>/dev/null || echo "null")
            if [ "$IGW_ID" != "null" ] && [ "$IGW_ID" != "None" ]; then
              safe_import "module.vpc.aws_internet_gateway.main" "$IGW_ID"
            fi
            
            # Import subnets
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[].SubnetId' --output text 2>/dev/null || echo "")
            if [ ! -z "$SUBNET_IDS" ]; then
              # Import public subnets (assuming first 2 are public)
              PUBLIC_SUBNETS=($(echo $SUBNET_IDS | tr ' ' '\n' | head -2))
              for i in "${!PUBLIC_SUBNETS[@]}"; do
                safe_import "module.vpc.aws_subnet.public[$i]" "${PUBLIC_SUBNETS[$i]}"
              done
              
              # Import private subnets (assuming last 2 are private)
              PRIVATE_SUBNETS=($(echo $SUBNET_IDS | tr ' ' '\n' | tail -2))
              for i in "${!PRIVATE_SUBNETS[@]}"; do
                safe_import "module.vpc.aws_subnet.private[$i]" "${PRIVATE_SUBNETS[$i]}"
              done
            fi
            
            # Import route tables
            RT_ID=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=${PROJECT_NAME}-public-rt" --query 'RouteTables[0].RouteTableId' --output text 2>/dev/null || echo "null")
            if [ "$RT_ID" != "null" ] && [ "$RT_ID" != "None" ]; then
              safe_import "module.vpc.aws_route_table.public" "$RT_ID"
              
              # Import route table associations
              for i in "${!PUBLIC_SUBNETS[@]}"; do
                if [ ! -z "${PUBLIC_SUBNETS[$i]}" ]; then
                  safe_import "module.vpc.aws_route_table_association.public[$i]" "${PUBLIC_SUBNETS[$i]}/$RT_ID"
                fi
              done
            fi
            
            # Import security groups
            EC2_SG_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=${PROJECT_NAME}-ec2-sg" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "null")
            if [ "$EC2_SG_ID" != "null" ] && [ "$EC2_SG_ID" != "None" ]; then
              safe_import "module.vpc.aws_security_group.ec2" "$EC2_SG_ID"
            fi
            
            RDS_SG_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=${PROJECT_NAME}-rds-sg" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "null")
            if [ "$RDS_SG_ID" != "null" ] && [ "$RDS_SG_ID" != "None" ]; then
              safe_import "module.vpc.aws_security_group.rds" "$RDS_SG_ID"
            fi
          fi
          
          # 2. Import DB subnet groups
          echo "🗄️ Importing DB subnet groups..."
          safe_import "module.vpc.aws_db_subnet_group.private" "${PROJECT_NAME}-private-db-subnet-group"
          safe_import "module.vpc.aws_db_subnet_group.public" "${PROJECT_NAME}-public-db-subnet-group"
          
          # 3. Import ECR repository
          echo "🐳 Importing ECR repository..."
          ECR_REPO_NAME="${PROJECT_NAME}-dev"
          if aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region $AWS_REGION > /dev/null 2>&1; then
            safe_import "module.ecr.aws_ecr_repository.main" "$ECR_REPO_NAME"
            safe_import "module.ecr.aws_ecr_lifecycle_policy.main[0]" "$ECR_REPO_NAME"
          fi
          
          # 4. Import S3 bucket and related resources
          echo "🪣 Importing S3 resources..."
          S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          if aws s3api head-bucket --bucket "$S3_BUCKET_NAME" 2>/dev/null; then
            # Get bucket suffix from the actual bucket name
            BUCKET_SUFFIX=$(echo "$S3_BUCKET_NAME" | sed "s/${PROJECT_NAME}-dev-storage-//")
            safe_import "module.s3_storage.random_string.bucket_suffix" "$BUCKET_SUFFIX"
            safe_import "module.s3_storage.aws_s3_bucket.main" "$S3_BUCKET_NAME"
            safe_import "module.s3_storage.aws_s3_bucket_versioning.main" "$S3_BUCKET_NAME"
            safe_import "module.s3_storage.aws_s3_bucket_server_side_encryption_configuration.main" "$S3_BUCKET_NAME"
            safe_import "module.s3_storage.aws_s3_bucket_public_access_block.main" "$S3_BUCKET_NAME"
            safe_import "module.s3_storage.aws_s3_bucket_cors_configuration.main[0]" "$S3_BUCKET_NAME"
            safe_import "module.s3_storage.aws_s3_bucket_lifecycle_configuration.main[0]" "$S3_BUCKET_NAME"
            safe_import "aws_s3_bucket_policy.storage_policy" "$S3_BUCKET_NAME"
          fi
          
          # 5. Import IAM resources
          echo "🔐 Importing IAM resources..."
          IAM_ROLE_NAME="${PROJECT_NAME}-dev-ec2-role"
          if aws iam get-role --role-name "$IAM_ROLE_NAME" > /dev/null 2>&1; then
            safe_import "module.iam.aws_iam_role.ec2_role" "$IAM_ROLE_NAME"
            safe_import "module.iam.aws_iam_instance_profile.ec2_profile" "${PROJECT_NAME}-dev-ec2-profile"
            safe_import "module.iam.aws_iam_role_policy.ecr_policy" "${IAM_ROLE_NAME}:${PROJECT_NAME}-dev-ecr-policy"
            safe_import "module.iam.aws_iam_role_policy.s3_policy" "${IAM_ROLE_NAME}:${PROJECT_NAME}-dev-s3-policy"
            safe_import "module.iam.aws_iam_role_policy.ses_policy[0]" "${IAM_ROLE_NAME}:${PROJECT_NAME}-dev-ses-policy"
            safe_import "module.iam.aws_iam_role_policy.cloudwatch_policy[0]" "${IAM_ROLE_NAME}:${PROJECT_NAME}-dev-cloudwatch-policy"
          fi
          
          # 6. Import RDS instance
          echo "🗃️ Importing RDS instance..."
          RDS_INSTANCE_ID="${PROJECT_NAME}-dev"
          if aws rds describe-db-instances --db-instance-identifier "$RDS_INSTANCE_ID" > /dev/null 2>&1; then
            safe_import "module.rds.aws_db_instance.main" "$RDS_INSTANCE_ID"
          fi
          
          # 7. Import EC2 instance
          echo "🖥️ Importing EC2 instance..."
          EC2_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${PROJECT_NAME}-dev" "Name=instance-state-name,Values=running,stopped" --query 'Reservations[0].Instances[0].InstanceId' --output text 2>/dev/null || echo "null")
          if [ "$EC2_INSTANCE_ID" != "null" ] && [ "$EC2_INSTANCE_ID" != "None" ]; then
            safe_import "module.ec2.aws_instance.main" "$EC2_INSTANCE_ID"
          fi
          
          # 8. Import Route53 record
          echo "🌍 Importing Route53 record..."
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones --query 'HostedZones[?Name==`turtil.co.`].Id' --output text 2>/dev/null | sed 's|/hostedzone/||')
          if [ ! -z "$HOSTED_ZONE_ID" ] && [ "$HOSTED_ZONE_ID" != "None" ]; then
            # Check if dev.api.turtil.co record exists
            if aws route53 list-resource-record-sets --hosted-zone-id "$HOSTED_ZONE_ID" --query "ResourceRecordSets[?Name=='dev.api.turtil.co.']" | grep -q "dev.api.turtil.co"; then
              safe_import "aws_route53_record.dev_api" "${HOSTED_ZONE_ID}_dev.api.turtil.co_A"
            fi
          fi
          
          echo "✅ Resource import process completed"

      - name: Regenerate Terraform Plan After Import
        working-directory: ./terraform
        run: terraform plan -out=tfplan
        env:
          # Project Configuration
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_environment: dev
          TF_VAR_app_debug: ${{ secrets.DEBUG }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          
          # Security & Authentication
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_refresh_token_expire_minutes: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
          
          # OTP Configuration
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_otp_max_attempts: ${{ secrets.OTP_MAX_ATTEMPTS }}
          TF_VAR_app_dev_otp: ${{ secrets.DEV_OTP }}
          
          # Application Settings
          TF_VAR_app_cors_origins: ${{ secrets.CORS_ORIGINS }}
          TF_VAR_app_allowed_hosts: ${{ secrets.ALLOWED_HOSTS }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          
          # Database & Cache
          TF_VAR_app_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_app_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          
          # AWS Services
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_app_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
          TF_VAR_custom_ami_id: ${{ secrets.CUSTOM_AMI_ID }}
          
          # Legacy compatibility
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          docker build --platform linux/arm64 -t $ECR_REPO_NAME .

      - name: Tag Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:dev
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Push Docker Images to ECR
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-dev"
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:dev
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Verify Deployment
        working-directory: ./terraform
        run: |
          echo "Verifying deployment..."
          API_URL=$(terraform output -raw dev_api_url)
          HEALTH_ENDPOINT="${API_URL}/health"
          
          echo "Testing API health endpoint: $HEALTH_ENDPOINT"
          sleep 180  # Allow more time for nginx + FastAPI startup
          
          if curl -f --max-time 30 --retry 15 --retry-delay 20 "$HEALTH_ENDPOINT"; then
            echo "✅ Deployment verification successful!"
            echo "🔗 API URL: $API_URL"
            echo "📚 API Docs: ${API_URL}/docs"
            echo "💚 Health Check: $HEALTH_ENDPOINT"
          else
            echo "❌ Deployment verification failed!"
            echo "Attempting fallback to direct IP..."
            INSTANCE_IP=$(terraform output -raw ec2_public_ip)
            FALLBACK_URL="http://$INSTANCE_IP:8000/health"
            echo "Trying direct access: $FALLBACK_URL"
            if curl -f --max-time 30 --retry 5 --retry-delay 10 "$FALLBACK_URL"; then
              echo "⚠️ Direct IP access works, but domain routing failed"
              echo "Check Route 53 DNS propagation for dev.api.turtil.co"
            fi
            exit 1
          fi

      - name: Deployment Success
        if: success()
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Single EC2 instance deployment"