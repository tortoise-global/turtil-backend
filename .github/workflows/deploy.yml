name: Deploy Infrastructure (Dev Only)

on:
  push:
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev

env:
  AWS_REGION: ap-south-2
  TF_VERSION: 1.5.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform-files
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform-files
        run: terraform plan -out=tfplan
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}

      - name: Terraform Apply
        working-directory: ./terraform-files
        run: terraform apply -auto-approve tfplan

      - name: Update GitHub Secrets with Outputs
        working-directory: ./terraform-files
        run: |
          # Get terraform outputs
          DATABASE_URL=$(terraform output -raw database_url)
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          ALB_DNS_NAME=$(terraform output -raw alb_dns_name)
          ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)
          CUSTOM_AMI_ID=$(terraform output -raw custom_ami_id)
          
          # Update GitHub environment secrets
          echo "DATABASE_URL=$DATABASE_URL" >> secrets.txt
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> secrets.txt
          echo "ALB_DNS_NAME=$ALB_DNS_NAME" >> secrets.txt
          echo "ECR_REPOSITORY_URL=$ECR_REPOSITORY_URL" >> secrets.txt
          echo "CUSTOM_AMI_ID=$CUSTOM_AMI_ID" >> secrets.txt
          
          # Use GitHub CLI to update secrets
          gh secret set DATABASE_URL --env dev --body "$DATABASE_URL"
          gh secret set S3_BUCKET_NAME --env dev --body "$S3_BUCKET_NAME"
          gh secret set ALB_DNS_NAME --env dev --body "$ALB_DNS_NAME"
          gh secret set ECR_REPOSITORY_URL --env dev --body "$ECR_REPOSITORY_URL"
          gh secret set CUSTOM_AMI_ID --env dev --body "$CUSTOM_AMI_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deployment Summary
        working-directory: ./terraform-files
        run: |
          echo "üéâ Dev Infrastructure Deployment Completed!"
          echo "Environment: dev"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Application URL: http://$(terraform output -raw alb_dns_name)"
          echo "Health Check: http://$(terraform output -raw alb_dns_name)/health"
          echo "Database: $(terraform output -raw database_url | cut -d'@' -f2 | cut -d':' -f1)"
          echo "S3 Bucket: $(terraform output -raw s3_bucket_name)"
          echo "ECR Repository: $(terraform output -raw ecr_repository_url)"
          echo "Custom AMI: $(terraform output -raw custom_ami_id)"
          
          echo ""
          echo "üìã Next Steps:"
          echo "1. Build and push Docker image to ECR"
          echo "2. Use GitHub CLI to get dev resources locally:"
          echo "   gh secret get DATABASE_URL --env dev"
          echo "   gh secret get S3_BUCKET_NAME --env dev"
          echo "3. Test health endpoint: curl http://$(terraform output -raw alb_dns_name)/health"

  build-and-push:
    runs-on: ubuntu-latest
    needs: deploy
    environment: dev
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        working-directory: ./turtil-backend
        run: |
          # Get ECR repository URL from secrets
          ECR_REPOSITORY_URL="${{ secrets.ECR_REPOSITORY_URL }}"
          
          # Build Docker image
          docker build -t $ECR_REPOSITORY_URL:dev .
          docker build -t $ECR_REPOSITORY_URL:latest .
          
          # Push Docker image
          docker push $ECR_REPOSITORY_URL:dev
          docker push $ECR_REPOSITORY_URL:latest
          
          echo "‚úÖ Docker image pushed successfully!"
          echo "Image: $ECR_REPOSITORY_URL:dev"

      - name: Trigger Instance Refresh
        run: |
          # Get ASG name from terraform output
          cd terraform-files
          ASG_NAME=$(terraform output -raw asg_name)
          
          echo "üîÑ Starting instance refresh for ASG: $ASG_NAME"
          
          # Start instance refresh to deploy new Docker image
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --region ${{ env.AWS_REGION }} \
            --strategy Rolling \
            --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 120}' \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "Instance refresh started: $REFRESH_ID"
          
          # Wait for refresh to complete
          aws autoscaling wait instance-refresh-successful \
            --auto-scaling-group-name "$ASG_NAME" \
            --region ${{ env.AWS_REGION }} \
            --instance-refresh-ids "$REFRESH_ID"
          
          echo "‚úÖ Instance refresh completed successfully!"

      - name: Verify Deployment
        run: |
          cd terraform-files
          ALB_DNS=$(terraform output -raw alb_dns_name)
          
          echo "üîç Verifying deployment..."
          echo "Testing endpoint: http://$ALB_DNS/health"
          
          # Health check with retry
          for i in {1..10}; do
            if curl -f --max-time 10 "http://$ALB_DNS/health"; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Health check failed, retry $i/10..."
              sleep 30
            fi
          done
          
          echo ""
          echo "üéâ Deployment verification completed!"
          echo "üåê Application URL: http://$ALB_DNS"
          echo "‚ù§Ô∏è  Health Check: http://$ALB_DNS/health"