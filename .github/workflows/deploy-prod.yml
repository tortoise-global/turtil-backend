name: Deploy to Production

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY_TO_PRODUCTION" to confirm'
        required: true
        type: string

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: prod
  TF_WORKSPACE: prod

jobs:
  confirm-production:
    name: Confirm Production Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Validate Production Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_production }}" != "DEPLOY_TO_PRODUCTION" ]; then
            echo "‚ùå Production deployment confirmation failed!"
            echo "Expected: DEPLOY_TO_PRODUCTION"
            echo "Received: ${{ github.event.inputs.confirm_production }}"
            exit 1
          fi
          echo "‚úÖ Production deployment confirmed"

  deploy-prod:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    environment: prod
    needs: [confirm-production]
    if: always() && (github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Select Terraform Workspace
        working-directory: ./terraform
        run: |
          terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var-file="environments/prod.tfvars" -out=tfplan
        env:
          TF_VAR_app_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_app_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_app_algorithm: ${{ secrets.ALGORITHM }}
          TF_VAR_app_access_token_expire_minutes: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          TF_VAR_app_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_version: ${{ secrets.VERSION }}
          TF_VAR_app_log_level: ${{ secrets.LOG_LEVEL }}
          TF_VAR_app_rate_limit_calls: ${{ secrets.RATE_LIMIT_CALLS }}
          TF_VAR_app_rate_limit_period: ${{ secrets.RATE_LIMIT_PERIOD }}
          TF_VAR_app_otp_expiry_minutes: ${{ secrets.OTP_EXPIRY_MINUTES }}
          TF_VAR_app_redis_user_cache_ttl: ${{ secrets.REDIS_USER_CACHE_TTL }}
          TF_VAR_app_redis_blacklist_ttl: ${{ secrets.REDIS_BLACKLIST_TTL }}
          TF_VAR_app_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_app_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}
          TF_VAR_app_upstash_redis_url: ${{ secrets.UPSTASH_REDIS_URL }}
          TF_VAR_app_upstash_redis_token: ${{ secrets.UPSTASH_REDIS_TOKEN }}
          TF_VAR_app_aws_ses_from_email: ${{ secrets.AWS_SES_FROM_EMAIL }}
          TF_VAR_app_aws_ses_region: ${{ secrets.AWS_SES_REGION }}
          TF_VAR_ecr_account_id: ${{ secrets.ECR_ACCOUNT_ID }}
          TF_VAR_app_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_app_debug: "false"

      - name: Import Existing Production Resources
        working-directory: ./terraform
        continue-on-error: true
        run: |
          echo "üîç Checking for existing production resources to import..."
          
          # Import ECR repository if it exists
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-prod"
          if aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "‚úÖ ECR repository exists, importing..."
            terraform import module.ecr_repo.aws_ecr_repository.this "$ECR_REPO_NAME" || echo "‚ö†Ô∏è ECR import failed or already imported"
          fi
          
          # Import ALB if it exists
          ALB_NAME="${{ secrets.PROJECT_NAME }}-prod-alb"
          ALB_ARN=$(aws elbv2 describe-load-balancers --names "$ALB_NAME" --query 'LoadBalancers[0].LoadBalancerArn' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "None")
          if [ "$ALB_ARN" != "None" ] && [ "$ALB_ARN" != "null" ]; then
            echo "‚úÖ ALB exists, importing..."
            terraform import module.example_alb.aws_lb.this "$ALB_ARN" || echo "‚ö†Ô∏è ALB import failed or already imported"
          fi
          
          # Import CloudFront distribution if it exists
          EXPECTED_CNAME="api.turtilcms.turtil.co"
          CF_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?@=='$EXPECTED_CNAME']].Id" --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "None")
          if [ "$CF_ID" != "None" ] && [ "$CF_ID" != "null" ] && [ -n "$CF_ID" ]; then
            echo "‚úÖ CloudFront distribution exists, importing..."
            terraform import module.cloudfront_with_alb.aws_cloudfront_distribution.this "$CF_ID" || echo "‚ö†Ô∏è CloudFront import failed or already imported"
          fi
          
          echo "üîß Production import phase completed"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-prod"
          docker build --platform linux/arm64 -t $ECR_REPO_NAME .

      - name: Tag Docker Image
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-prod"
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:prod
          docker tag $ECR_REPO_NAME:latest ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Push Docker Images to ECR
        run: |
          ECR_REPO_NAME="${{ secrets.PROJECT_NAME }}-prod"
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:prod
          docker push ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

      - name: Zero-Downtime Production Deployment
        working-directory: ./terraform
        run: |
          ASG_NAME=$(terraform output -raw asg_name)
          echo "Starting zero-downtime production deployment for ASG: $ASG_NAME"

          # Wait for any existing instance refresh to complete
          echo "Checking for existing instance refreshes..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --region ${{ env.AWS_REGION }} \
              --query 'InstanceRefreshes[?Status==`InProgress`].Status' \
              --output text)
            if [ -z "$STATUS" ]; then
              echo "No instance refresh in progress. Proceeding..."
              break
            fi
            echo "Instance refresh in progress. Waiting..."
            sleep 30
          done

          # Start new instance refresh with zero-downtime configuration
          echo "Starting instance refresh with zero-downtime configuration..."
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --region ${{ env.AWS_REGION }} \
            --strategy Rolling \
            --preferences '{
              "MinHealthyPercentage": 100,
              "InstanceWarmup": 300,
              "CheckpointPercentages": [50],
              "CheckpointDelay": 600
            }' \
            --query 'InstanceRefreshId' \
            --output text)

          echo "Instance refresh started with ID: $REFRESH_ID"

          # Monitor the refresh progress
          echo "üîÑ Production deployment in progress..."
          while true; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --region ${{ env.AWS_REGION }} \
              --instance-refresh-ids "$REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)

            case $REFRESH_STATUS in
              "Successful")
                echo "‚úÖ Zero-downtime production deployment completed successfully!"
                break
                ;;
              "Failed"|"Cancelled")
                echo "‚ùå Production deployment failed with status: $REFRESH_STATUS"
                exit 1
                ;;
              "InProgress"|"Pending")
                sleep 60
                ;;
              *)
                echo "‚ö†Ô∏è Unknown status: $REFRESH_STATUS"
                sleep 30
                ;;
            esac
          done

      - name: Verify Production Deployment
        working-directory: ./terraform
        run: |
          echo "Verifying production deployment health..."
          ALB_DNS=$(terraform output -raw example_alb_dns_name)
          ALB_ENDPOINT="http://$ALB_DNS/health"
          
          echo "Testing production ALB health endpoint: $ALB_ENDPOINT"
          sleep 120  # Extended wait for production
          
          if curl -f --max-time 30 --retry 5 --retry-delay 15 "$ALB_ENDPOINT"; then
            echo "‚úÖ Production deployment verification successful!"
          else
            echo "‚ùå Production deployment verification failed!"
            # Gather debugging information
            ASG_NAME=$(terraform output -raw asg_name)
            echo "üìù Gathering production debugging information..."
            
            aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$ASG_NAME" \
              --region ${{ env.AWS_REGION }} \
              --query 'AutoScalingGroups[0].{DesiredCapacity:DesiredCapacity,MinSize:MinSize,MaxSize:MaxSize,Instances:Instances[].{InstanceId:InstanceId,LifecycleState:LifecycleState,HealthStatus:HealthStatus}}' \
              --output table
            
            TARGET_GROUP_ARN=$(terraform output -raw example_alb_target_group_arn)
            aws elbv2 describe-target-health \
              --target-group-arn "$TARGET_GROUP_ARN" \
              --region ${{ env.AWS_REGION }} \
              --output table
            
            exit 1
          fi

      - name: Production Deployment Success
        if: success()
        run: |
          echo "üéÜ PRODUCTION DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "Environment: prod"
          echo "Branch: prod"
          echo "Commit: ${{ github.sha }}"
          echo "Zero-downtime deployment with comprehensive health verification passed."